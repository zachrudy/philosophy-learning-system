// This is your Prisma schema file adapted for SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT") // Instead of enum
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  progress    Progress[]
  reflections Reflection[]

  @@map("users")
}

// Note: We removed the RelationType enum and will use string constants instead

// Base model for all philosophical entities
model PhilosophicalEntity {
  id          String   @id @default(cuid())
  type        String   // Discriminator field: "Philosopher", "PhilosophicalConcept", "Branch", "Movement", "Problematic", "Era"
  name        String
  description String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Type-specific fields (using JSON for flexibility in SQLite)
  // For Philosopher
  birthplace  String?
  nationality String?
  biography   String?
  ontologicalPosition String?
  
  // For PhilosophicalConcept
  primaryText String?
  keyTerms    String? // Stored as JSON string: ["term1", "term2"]

  // For Problematic
  centralQuestion String?
  stillRelevant   Boolean? @default(true)

  // For Branch
  scope String?

  // For Movement
  geographicalFocus String?
  historicalContext String?

  // Relationships
  sourceRelations PhilosophicalRelation[] @relation("sourceEntity")
  targetRelations PhilosophicalRelation[] @relation("targetEntity")

  // Many-to-many relationship with lectures
  lectures         Lecture[]
  reflectionPrompts ReflectionPrompt[]

  @@map("philosophical_entities")
}

// Model for relationships between philosophical entities
model PhilosophicalRelation {
  id             String   @id @default(cuid())
  sourceEntityId String
  targetEntityId String
  relationTypes  String   // Stored as JSON string of relation types
  description    String?
  importance     Int      @default(3) // 1-5 scale
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sourceEntity PhilosophicalEntity @relation("sourceEntity", fields: [sourceEntityId], references: [id], onDelete: Cascade)
  targetEntity PhilosophicalEntity @relation("targetEntity", fields: [targetEntityId], references: [id], onDelete: Cascade)

  @@unique([sourceEntityId, targetEntityId, description])
  @@map("philosophical_relations")
}

// Enhanced Lecture model
model Lecture {
  id                String     @id @default(cuid())
  title             String
  description       String
  contentUrl        String     // Changed from videoUrl to be more generic
  lecturerName      String     // Michael Sugrue, Dr. Staloff, etc.
  contentType       String     // "video", "podcast", etc.
  category          String     // "introductions", "jerusalem", etc.
  order             Int        // Order within its category
  embedAllowed      Boolean    @default(true)
  sourceAttribution String     // Citation or credit information

  // Reflection prompts - specific to this lecture
  initialPrompt     String     // Prime students before watching
  masteryPrompt     String     // Deeper reflection after watching
  evaluationPrompt  String     // Instructions for AI evaluation

  // Relationships with philosophical entities
  entities          PhilosophicalEntity[]

  // Direct prerequisite relationships
  prerequisiteFor   LecturePrerequisite[] @relation("PrerequisiteFor")
  prerequisites     LecturePrerequisite[] @relation("HasPrerequisite")

  // User progress/reflections (referenced from other models)
  progress          Progress[]
  reflections       Reflection[]

  // Default timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("lectures")
}

// New model for lecture prerequisites
model LecturePrerequisite {
  id                    String   @id @default(cuid())
  lectureId             String
  prerequisiteLectureId String
  isRequired            Boolean  @default(true)  // Required vs. recommended
  importanceLevel       Int      @default(3)     // 1-5 scale of importance

  // Relations
  lecture               Lecture  @relation("HasPrerequisite", fields: [lectureId], references: [id])
  prerequisiteLecture   Lecture  @relation("PrerequisiteFor", fields: [prerequisiteLectureId], references: [id])

  @@unique([lectureId, prerequisiteLectureId])
  @@map("lecture_prerequisites")
}

// User Progress model
model Progress {
  id          String    @id @default(cuid())
  userId      String
  lectureId   String
  status      String    @default("NOT_STARTED") // Instead of enum
  lastViewed  DateTime?
  completedAt DateTime?
  decayFactor Float     @default(1.0) // Knowledge decay factor
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture    Lecture   @relation(fields: [lectureId], references: [id])

  @@unique([userId, lectureId])
  @@map("progress")
}

// Reflection model
model Reflection {
  id            String   @id @default(cuid())
  userId        String
  lectureId     String
  promptId      String
  content       String   // Removed @db.Text
  aiEvaluation  String?  // Using String instead of Json, will store serialized JSON
  score         Float?   // Optional scoring
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture   Lecture          @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  prompt    ReflectionPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("reflections")
}

// ReflectionPrompt model
model ReflectionPrompt {
  id          String   @id @default(cuid())
  conceptId   String
  promptText  String
  promptType  String   // Instead of enum
  difficulty  Int      @default(1) // 1-5 scale
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  concept     PhilosophicalEntity @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  reflections Reflection[]

  @@map("reflection_prompts")
}
