// This is your Prisma schema file adapted for SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT") // Instead of enum
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  progress    Progress[]
  reflections Reflection[]

  @@map("users")
}

// Note: We removed the RelationType enum and will use string constants instead

// Base model for all philosophical entities
model PhilosophicalEntity {
  id          String   @id @default(cuid())
  type        String // Discriminator field: "Philosopher", "PhilosophicalConcept", "Branch", "Movement", "Problematic", "Era"
  name        String
  description String
  startYear   Int?
  endYear     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Type-specific fields (using JSON for flexibility in SQLite)
  // For Philosopher
  birthplace          String?
  nationality         String?
  biography           String?
  ontologicalPosition String?

  // For PhilosophicalConcept
  primaryText String?
  keyTerms    String? // Stored as JSON string: ["term1", "term2"]

  // For Problematic
  centralQuestion String?
  stillRelevant   Boolean? @default(true)

  // For Branch
  scope String?

  // For Movement
  geographicalFocus String?
  historicalContext String?

  // Relationships
  sourceRelations PhilosophicalRelation[] @relation("sourceEntity")
  targetRelations PhilosophicalRelation[] @relation("targetEntity")

  // Add the typed relationship
  lectureRelations LectureEntityRelation[]
  Lecture          Lecture?                @relation(fields: [lectureId], references: [id])
  lectureId        String?

  @@map("philosophical_entities")
}

// Model for relationships between philosophical entities
model PhilosophicalRelation {
  id             String   @id @default(cuid())
  sourceEntityId String
  targetEntityId String
  relationTypes  String // Stored as JSON string of relation types
  description    String?
  importance     Int      @default(3) // 1-5 scale
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sourceEntity PhilosophicalEntity @relation("sourceEntity", fields: [sourceEntityId], references: [id], onDelete: Cascade)
  targetEntity PhilosophicalEntity @relation("targetEntity", fields: [targetEntityId], references: [id], onDelete: Cascade)

  @@unique([sourceEntityId, targetEntityId, description])
  @@map("philosophical_relations")
}

// Enhanced Lecture model with prompt fields
model Lecture {
  id                String  @id @default(cuid())
  title             String
  description       String
  contentUrl        String // Changed from videoUrl to be more generic
  lecturerName      String // Michael Sugrue, Dr. Staloff, etc.
  contentType       String // "video", "podcast", etc.
  category          String // "introductions", "jerusalem", etc.
  order             Int // Order within its category
  embedAllowed      Boolean @default(true)
  sourceAttribution String // Citation or credit information

  // Reflection prompts - specific to this lecture
  preLecturePrompt  String // Prime students before watching
  initialPrompt     String // Initial reflection after watching
  masteryPrompt     String // Deeper reflection for mastery demonstration
  evaluationPrompt  String // Instructions for AI evaluation
  discussionPrompts String // Post-mastery discussion suggestions

  // Relationships with philosophical entities
  entities        PhilosophicalEntity[]
  entityRelations LectureEntityRelation[] // New relationship with type

  // Direct prerequisite relationships
  prerequisiteFor LecturePrerequisite[] @relation("PrerequisiteFor")
  prerequisites   LecturePrerequisite[] @relation("HasPrerequisite")

  // User progress/reflections (referenced from other models)
  progress    Progress[]
  reflections Reflection[]

  // Default timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lectures")
}

// New model for typed relationships between lectures and entities
model LectureEntityRelation {
  id           String @id @default(cuid())
  lectureId    String
  entityId     String
  relationType String // "introduces", "expands", "critiques", "applies", "contextualizes", "compares"

  // Relations
  lecture Lecture             @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  entity  PhilosophicalEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([lectureId, entityId, relationType])
  @@map("lecture_entity_relations")
}

// New model for lecture prerequisites
model LecturePrerequisite {
  id                    String  @id @default(cuid())
  lectureId             String
  prerequisiteLectureId String
  isRequired            Boolean @default(true) // Required vs. recommended
  importanceLevel       Int     @default(3) // 1-5 scale of importance

  // Relations
  lecture             Lecture @relation("HasPrerequisite", fields: [lectureId], references: [id])
  prerequisiteLecture Lecture @relation("PrerequisiteFor", fields: [prerequisiteLectureId], references: [id])

  @@unique([lectureId, prerequisiteLectureId])
  @@map("lecture_prerequisites")
}

// User Progress model (updated with more states)
model Progress {
  id          String    @id @default(cuid())
  userId      String
  lectureId   String
  status      String    @default("LOCKED") // "LOCKED", "READY", "STARTED", "WATCHED", "INITIAL_REFLECTION", "MASTERY_TESTING", "MASTERED"
  lastViewed  DateTime?
  completedAt DateTime?
  decayFactor Float     @default(1.0) // Knowledge decay factor
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references: [id])

  @@unique([userId, lectureId])
  @@map("progress")
}

// Reflection model (updated)
model Reflection {
  id           String   @id @default(cuid())
  userId       String
  lectureId    String
  promptType   String // "pre-lecture", "initial", "mastery", "discussion"
  content      String
  aiEvaluation String? // Using String instead of Json, will store serialized JSON
  status       String   @default("SUBMITTED") // "SUBMITTED", "EVALUATED", "MASTERY_ACHIEVED"
  score        Float? // Optional scoring
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("reflections")
}
